Lesson 6: Syntax Parsers, Execution Contexts, and Lexical Environments
1) Syntax Parser - A program that reads your code and determines what it does and if its grammar is valid.
1a) After syntax parser validates code, the code is either compiled or interpreted.
2) Lexical Environment - Where something sits physically in the code you write.
3) Execution Context - A wrapper to help manage the code that is running.

Lesson 7: Name/Value Pairs and Objects
1) Name/Value Pair: A name which maps to a unique value.
2) Object: A collection of name value pairs.

Lesson 9: The Global Environment and the Global Object
1) There may be multiple execution contexts that code may be running in.
2) Global Execution Context creates a global object (collection of name value pairs accessible everywhere in code) and 'this' due to Javascript Engine
3) Global Object = window in browser
4) Global Object = 'this'
5) Global = Not inside a function
6) Outer Environment = Environment outside of inner execution context

Lesson 10: The Execution Context - Creation and Hoisting
1) Two phases exist for creating the execution context
2) First Phase - Creation Phase: Global Object, 'this', Outer Environment, Memory Space for Variables and Functions (Hoisting)
2a) Variables are declared
2b) Functions and contained logic are placed into memory

Lesson 11: Javascript and 'Undefined'
1) not defined != undefined
2) undefined is a value in javascript
3) Never explicity set 'a = undefined'. That is the responsibility of the interpreter.

Lesson 12: The Execution Context - Code Execution
1) Second Phase - Code Execution Phase: Code is run

Lesson 13: Single Threaded, Synchronous Execution
1) Single Threaded: One command executed at a time.
2) Synchronous: One at a time.

Lesson 14: Function Invocation and the Execution Stack
1) Function Invocation: Running a function.
2) Execution Stack: Execution contexts on top of one another.
3) For every executed function, a new execution context is created.

Lesson 15: Functions, Context, and Variable Environments
1) Variable Environment: Where the variables live and how they relate to each other in memory.

Lesson 16: The Scope Chain
1) The reference to the Outer Environment depends upon where a piece of code sits lexically. Depends on when that piece of code was created in terms of execution context.
2) Scope Chain = Execution Stack. If a variable cannot be found in execution context, the javascript engine will go down the scope chain to find that declared value.

Lesson 17: Scope, ES6, and let
1) Scope: Where a variable is available in your code.
2) let: Can be used instead of var, but you cannot use it until it has been declared during runtime.

Lesson 18: What About Asynchronous Callbacks?
1) Asynchronous: More than one thread executing at a time.
2) Browser contains the following components: Rending Engine, Javascript Engine, Http Request
3) Event Queue: Items won't be proccessed until Execution Stack is empty.
4) Browser asynchronously puts events into the Event Queue.


