Lesson 19: Types and Javascript
1) Dynamic Typing: You don't tell the engine what type of data a variable holds, it figures it out while your code is running.
2) Static Typing: Java or C# (e.g. bool isNew) - Type determined during compile time
3) Dynamic Typing: Javascript (e.g. var isNew = true;) - Type determined during runtime

Lesson 20: Primitive Types
1) Primitive Type: A type of data that represents a single value.
1a) Undefined - Represents a lack of existence (do not set to this)
1b) Null - Represents a lack of existense (set to this)
1c) Boolean - True or False
1d) Number - Floating point number (there's always some decimals). Unlike other programming languages, there's only one 'number' type and it can make math weird.
1e) String - A sequence of characters (both '' and "" can be used)
1f) Symbol - Used in ES6

Lesson 21: Operators
1) Operator: A special function that is syntactically (written) differently
2) In-Fix Notation: Operator (or function) sits between two parameters 

Lesson 22: Operator Precedence and Associativity
1) Operator Precedence: Which operator function gets called first. Functions are called in order of precedence.
2) Associativity: What order operator functions get called in: left-to-right or right-to-left.

Lesson 23: Conceptual Aside: Coercion
1) Coercion: Converting a value from one type to another.

Lesson 24: Comparison Operators
1) Associativity and coercion are important to considers when dealing with operators.
2) Number(undefined) = NaN
3) Number(null) = 0
4) Equality (==): If the javascript engine determines that the types are different, one type will be coerced in order to make the Comparison.
5) Strict Equality (===): If both operands are of the same type, they are not coerced. If there are two different types, the result will be false.

Lesson 25: Existence and Booleans
1) "",Null,0 will be coerced to false

Lesson 26: Default Values
1) Logical OR Operator (||): Returns the value that can be coerced to true.

Lesson 27: Default Values
1) Multiple script tags in an html file results in all the js files being placed into one file and then being run.
2) Variables with the same name in the same level of the execution context will be overriden by the last declared value.
3) Many Javascript libraries with have a logical OR operator in the case that the value already exists in a previously loaded library.



